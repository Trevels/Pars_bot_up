from Pars import collect_orders, Rewrite_order, translate_message
import cloudscraper
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import asyncio

load_dotenv()

bot = Bot(token=os.getenv("token"))
dp = Dispatcher()
active_tasks = {}  # –ó–∞–º—ñ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø—É—â–µ–Ω—ñ —Ü–∏–∫–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

async def check_orders(message: Message, lang: str):
    chat_id = message.chat.id
    while chat_id in active_tasks:  # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è
        scraper = cloudscraper.create_scraper()
        data = collect_orders(scraper)

        if data:
            if lang == '–£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é':
                data = translate_message(data)

            for item in data:
                Name = item["Name"]
                Fixed_price = item["Fixed_price"]
                Task = item["Task"]
                Skills_Expertise = item["Skills_Expertise"]
                Url = item["Url"]

                # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä—è–º–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                card_text = (
                    f"üîî –ù–æ–≤–∏–π —Ñ—Ä—ñ–ª–∞–Ω—Å-–ø—Ä–æ—î–∫—Ç!\n\n"
                    f"üìå {Name}\n"
                    f"üí∞ {Fixed_price}\n"
                    f"üìù {Task}\n"
                    f"üéØ {Skills_Expertise}\n\n"
                    f"üåç –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –¥–µ—Ç–∞–ª—ñ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:"
                )

                # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏"
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", callback_data=f"view_{Url}")]
                    ]
                )

                await message.answer(card_text, reply_markup=keyboard)
        else:
            print(f"–ù–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î –¥–ª—è {chat_id}")

        await asyncio.sleep(200)  # –ß–µ–∫–∞—î–º–æ 200 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é

@dp.callback_query()
async def handle_callback(callback_query: types.CallbackQuery):
    """ –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏" —ñ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ """
    callback_data = callback_query.data

    if callback_data.startswith("view_"):
        url = callback_data.replace("view_", "")
        await callback_query.message.answer(f"üîó –û—Å—å –≤–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {url}")
        await callback_query.answer()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è

@dp.message(Command("start"))
async def start_command(message: Message):
    chat_id = message.chat.id

    start_buttons = ['–£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é', 'in English']
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=button) for button in start_buttons]],
        resize_keyboard=True
    )

    # –Ø–∫—â–æ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑—É–ø–∏–Ω—è—î–º–æ –π–æ–≥–æ
    if chat_id in active_tasks:
        active_tasks[chat_id].cancel()
        del active_tasks[chat_id]

    Rewrite_order()
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ", reply_markup=keyboard)

@dp.message()
async def handle_text(message: Message):
    chat_id = message.chat.id

    if message.text in ['–£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é', 'in English']:
        # –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑—É–ø–∏–Ω—è—î–º–æ –π–æ–≥–æ
        if chat_id in active_tasks:
            active_tasks[chat_id].cancel()
            del active_tasks[chat_id]

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        active_tasks[chat_id] = asyncio.create_task(check_orders(message, message.text))

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())